Date: 05/26/2025

############################

Website:
DataLemur

Difficulty:
Easy

Question Type:
SQL

Question:
Weakest Strong Link - Intuit Python Interview Question
You know that phrase, how a chain is only as strong as its weakest link?
Imagine you had a chain-link fence, represented as a matrix. 
For the chain-link at position (i, j), the input matrix strength[i][j] indicates how strong the chain is at that position (where stronger means a higher number). 
The numbers in the matrix are unique.
The Weakest Strong Link is defined as the weakest chain-link in its row but also the strongest link in its column.
Given a matrix strength, return the weakest strong link if it exists; otherwise, return -1. 
If a weakest strong link exists, it is always exactly one, and it can be proven that no other link will satisfy both conditions simultaneously.

Example #1
Input: strength = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]
Output: 7
Explanation:
7 is the weakest in its row [7, 8, 9] and the strongest in its column [1, 4, 7], making it the Weakest Strong Link.

Example #2
Input: strength = [[9, 8, 10],[6, 15, 4]]
Output: -1
Explanation:
No chain-link satisfies the criteria of being the weakest in its row and the strongest in its column.

Data Dictionary:
Table name = ''
N/A

Code:
Weakest in row, strongest in column
Explanations
Ex. [[1 ,2, 3], [4, 5, 6], [7, 8, 9]]
min_rows = [1, 4, 7]
max_cols = [7, 8, 9]
return -1
Ex. [[10, 20, 30], [5, 15, 25], [1, 2, 3]]
min_rows = [10, 5, 1]
max_cols = [10, 20, 30]
return 10
Ex. strength = [[10, 20, 5], [15, 8, 25], [7, 30, 12]]
m = 3
n = 3
min_rows = [0, 0, 0]
max_cols = [0, 0, 0]
i = 0
    strength[0] = [10, 20 , 5]
    min(strength[0]) = 5
    min_rows[0] = 5
    min_rows = [5, 0, 0]
i = 1
    strength[1] = [15, 8, 25]
    min(strength[1]) = 8
    min_rows[1] = 8
    min_rows = [5, 8, 0]
i = 2
    strength[2] = [7, 30, 12]
    min(strength[2]) = 7
    min_rows[2] = 7
    min_rows = [5, 8, 7]
j = 0
    cur_max = 0
    i = 0
        strength[0][0] = 10
        cur_max = max(0, 10) = 10
    i = 1
        strength[1][0] = 15
        cur_max = max(10, 15) = 15
    i = 2
        strength[2][0] = 7
        cur_max = max(15, 7) = 15
    max_cols[0] = 15
    max_cols = [15, 0, 0]
j = 1
    cur_max = 0
    i = 0
        strength[0][1] = 20
        cur_max = max(0, 20) = 20
    i = 1
        strength[1][1] = 8
        cur_max = max(20, 8) = 20
    i = 2
        strength[2][1] = 30
        cur_max = max(20, 30) = 30
    max_cols[1] = 30
    max_cols = [15, 30, 0]
j = 2
    cur_max = 0
    i = 0
        strength[0][2] = 5
        cur_max = max(0, 5) = 5
    i = 1
        strength[1][2] = 25
        cur_max = max(5, 25) = 25
    i = 2
        strength[2][2] = 12
        cur_max = max(25, 12) = 25
    max_cols[2] = 25
    max_cols = [15, 30, 25]
strength = [[10, 20, 5], [15, 8, 25], [7, 30, 12]]
min_rows = [5, 8, 7]
max_cols = [15, 30, 25]
i = 0, j = 0
    strength[0][0] = 10
    10 == min_rows[0] = 5 == False
i = 0, j = 1
    strength[0][1] = 20
    20 == min_rows[0] = 5 == False
i = 0, j = 2
    strength[0][2] = 5
    5 == min_rows[0] = 5 == True
    5 == max_cols[2] = 25 == False
i = 1, j = 0
i = 1, j = 1
i = 1, j = 2
i = 2, j = 0
i = 2, j = 1
i = 2, j = 2
return -1

Solution #1 (also called saddle_point)
def weakest_strong_link(strength):
    m = len(strength)
    n = len(strength[0])
    
    min_rows = [0] * m 
    max_cols = [0] * n 
    
    for i in range(m):
        min_rows[i] = min(strength[i])
        
    for j in range(n):
        cur_max = 0
        for i in range(m):
            cur_max = max(cur_max, strength[i][j])
        max_cols[j] = cur_max
        
    for i in range(m):
        for j in range(n):
            if strength[i][j] == min_rows[i] and strength[i][j] == max_cols[j]:
                return strength[i][j]
        
    return -1

############################

Website:
StrataScratch - ID 2063

Difficulty:
Easy

Question Type:
SQL

Question:
Goldman Sachs - Change of Currency Exchange Rates
You are given a list of exchange rates from various currencies to US Dollars (USD) in different months. 
Show how the exchange rate of all the currencies changed in the first half of 2020. 
Output the currency code and the difference between values of the exchange rate between July 1, 2020 and January 1, 2020.

Data Dictionary:
Table name = 'sf_exchange_rate'
date: date(str)
exchange_rate: double_precision(float)
source_currency: text(str)
target_currency: text(str)

Code:
Solution #1 (mine CTE)
/* SELECT to preview data */
SELECT * FROM sf_exchange_rate;

/* Jul 1 and Jan 1 2020 */
SELECT 
    source_currency,
    exchange_rate
FROM sf_exchange_rate
WHERE date = '2020-07-01';

SELECT 
    source_currency,
    exchange_rate
FROM sf_exchange_rate
WHERE date = '2020-01-01';

/* CTE JOIN dates */
/* source_currency, target_currency, difference between exchange_rate between Jul 1 and Jan 1 2020 */
WITH july_rate AS (
    SELECT 
        jl.source_currency,
        jl.exchange_rate
    FROM sf_exchange_rate as jl
    WHERE date = '2020-07-01'
),
january_rate AS (
   SELECT 
       ja.source_currency,
       ja.exchange_rate
    FROM sf_exchange_rate as ja
    WHERE date = '2020-01-01'
)
SELECT
   jl.source_currency,
   (jl.exchange_rate - ja.exchange_rate) AS exchange_difference
FROM july_rate as jl
JOIN january_rate as ja
   ON jl.source_currency = ja.source_currency
ORDER BY 2 DESC;

Solution #2 (self join)
SELECT
    s1.source_currency,
    s1.exchange_rate - s2.exchange_rate AS exchange_rate_difference
FROM
    sf_exchange_rate s1
JOIN
    sf_exchange_rate s2 ON s1.source_currency = s2.source_currency
WHERE
    s1.target_currency = 'USD'
    AND s2.target_currency = 'USD'
    AND s1.date = '2020-07-01'
    AND s2.date = '2020-01-01';

############################

Website:
StrataScratch - ID 2067

Difficulty:
Easy

Question Type:
SQL

Question:
Meta - Low Fat and Recyclable
What percentage of all products are both low fat and recyclable?

Data Dictionary:
Table name = 'facebook_products'
brand_name: text(str)
is_low_fat: text(str)
is_recycleable: text(str)
product_category: bigint(int)
product_class: text(str)
product_family: text(str)
product_id: bigint(int)

Code:
Solution #1
/* SELECT to preview data */
SELECT * FROM facebook_products;

/* Separate numerator and denominator of percentage */
SELECT 
    COUNT(*) as num
FROM facebook_products
WHERE is_low_fat = 'Y'
    AND is_recyclable = 'Y';
    
SELECT 
    COUNT(*) as den
FROM facebook_products;

/* CTE JOIN for percentage */
/* Percentage of products both low fat and recyclable */
WITH numerator AS (
    SELECT 
        COUNT(*) as num
    FROM facebook_products
    WHERE is_low_fat = 'Y'
        AND is_recyclable = 'Y'
),
denominator AS (
    SELECT 
        COUNT(*) as den
    FROM facebook_products
)
SELECT
    CAST(num AS DECIMAL(10,2)) / CAST(den AS DECIMAL(10,2)) * 100 AS percentage_product
FROM numerator, denominator;

Solution #2
SELECT
    CAST(COUNT(CASE WHEN is_low_fat = 'Y' AND is_recyclable = 'Y' THEN product_id END) AS DECIMAL(10, 2)) * 100.0 / COUNT(product_id) AS percentage_low_fat_recyclable
FROM
    facebook_products;
    
Solution #3 (divison by zero)
SELECT
    CASE
        WHEN COUNT(product_id) = 0 THEN 0.00
        ELSE CAST(COUNT(CASE WHEN is_low_fat = 'Y' AND is_recyclable = 'Y' THEN product_id END) AS DECIMAL(10, 2)) * 100.0 / COUNT(product_id)
    END AS percentage_low_fat_recyclable
FROM
    facebook_products;

