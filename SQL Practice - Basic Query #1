## SQL Practice - Basic Query #1

DROP TABLE student;

CREATE TABLE student (
student_id INT AUTO_INCREMENT,
name VARCHAR(20),
major VARCHAR(20),
PRIMARY KEY (student_id)
);

SELECT * FROM student;

INSERT INTO student(name,major) VALUES('Jack', 'Biology');
INSERT INTO student(name,major) VALUES('Kate', 'Sociology');
INSERT INTO student(name,major) VALUES('Claire','Chemistry');
INSERT INTO student(name,major) VALUES('Jack', 'Biology');
INSERT INTO student(name,major) VALUES('Mike', 'Computer Science');

SELECT name
FROM student;

SELECT name, major
FROM student;

SELECT student.name, student.major
FROM student
ORDER BY name DESC;

SELECT *
FROM student
ORDER BY student_id DESC;

SELECT *
FROM student
ORDER BY student_id ASC;

SELECT *
FROM student
LIMIT 2;

SELECT *
FROM student
ORDER BY student_id DESC
LIMIT 2;

SELECT *
FROM student
WHERE major = 'Biology';

SELECT name,major
FROM student
WHERE major = 'Chemistry';

SELECT name,major
FROM student
WHERE major <> 'Chemistry';

SELECT *
FROM student
WHERE student_id <=3;

SELECT *
FROM student
WHERE student_id <=3 AND name <> 'Jack';

SELECT *
FROM student
WHERE student_id <=3 AND name <> 'Jack';

SELECT *
FROM student
WHERE name IN ('Claire', 'Kate', 'Mike');

SELECT *
FROM student
WHERE major IN ('Biology', 'Chemistry') AND student_id > 2;

Find all employees
SELECT *
FROM employee;
Find all clients
SELECT *
FROM client;
Find all employeses ordered by salary
SELECT *
FROM employee
ORDER BY salary;
Find all employeses ordered by salary
SELECT *
FROM employee
ORDER BY salary DESC;
Find all employeses ordered by sex then name
SELECT *
FROM employee
ORDER BY sex, first_name, last_name;
Find the first 5 employees in the table
SELECT *
FROM employee
LIMIT 5;
Find the first and last name of all employees
SELECT first_name, last_name
FROM employee;
Find the forename and surnames names of all employees
SELECT first_name AS forename, last_name AS surnames
FROM employee;
Find out all the different genders
SELECT DISTINCT sex
FROM employee;
Find out all the different genders
SELECT DISTINCT branch_id
FROM employee;
Find out all the different genders
SELECT DISTINCT branch_id
FROM employee;
Find the number of employees
SELECT COUNT(emp_id)
FROM employee;
Find the number of employees
SELECT COUNT(super_id)
FROM employee;
Find the number of female employees born after 1970
SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';
Find the average of all employee salaries
SELECT AVG(salary)
FROM employee;
Find the average of all employee salaries
SELECT AVG(salary)
FROM employee
WHERE sex = 'M';
Find the sum of all employee salaries
SELECT SUM(salary)
FROM employee;
Find out how many males and females there are
SELECT COUNT(sex)
FROM employee;
Find out how many males and females there are
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;
Find the total sales of each salesman
SELECT sum(total_sales), emp_id
FROM works_with
GROUP BY emp_id;
Find the total sales of each salesman
SELECT sum(total_sales), client_id
FROM works_with
GROUP BY client_id;
% = any = # characters, _ = one character
Find any client's who are an LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC';
Find any branch suppliers who are in the label business
SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '% Label%';
Find any employee born in October
SELECT *
FROM employee
WHERE birth_day LIKE '____-10%';
Find any employee born in February
SELECT *
FROM employee
WHERE birth_day LIKE '____-02%';
Find any clients who are schools
SELECT *
FROM client
WHERE client_name LIKE '%school%';
Find a list of employee and branch names
SELECT first_name AS Company_Names
FROM employee
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client;
Find a list of all clients & branch suppliers' names
SELECT client_name
FROM client
UNION
SELECT supplier_name
FROM branch_supplier;
Find a list of all clients & branch suppliers' names
SELECT client_name, client.branch_id
FROM client
UNION
SELECT supplier_name, branch_supplier.branch_id
FROM branch_supplier;
Find a list of all money spent or earned by the company
SELECT salary
FROM employee
UNION
SELECT total_sales
FROM works_with
INSERT INTO branch VALUES(4, 'Buffalo', NULL, NULL);

Find all branches and the names of their managers
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id;
Find names of all employees who have
sold over 30,000 copies to a single client
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
SELECT works_with.emp_id
FROM works_with
WHERE works_with.total_sales > 30000
);
Find all clients who are handled by the branch
that Michael Scott manages
Assume you know Michael's ID
SELECT client.client_name
FROM client
WHERE client.branch_id = (
SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id = 102
);

Find all clients who are handled by the branch
that Michael Scott manages
Assume you know Michael's ID
SELECT client.client_name
FROM client
WHERE client.branch_id = (
SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id = 102
LIMIT 1
);
CREATE TABLE branch (
branch_id INT PRIMARY KEY,
branch_name VARCHAR(40),
mgr_id INT,
mgr_start_date DATE,
FOREIGN KEY(mgr_id), REFERENCES employee(emp_id) ON DELETE SET NULL
);

DELETE FROM employee
WHERE emp_id = 102;

SELECT *from branch;

SELECT *from employee;

CREATE TABLE branch_supplier (
branch_id INT,
supplier_name VARCHAR(40),
supply_type VARCHAR(40),
PRIMARY KEY(branch_id, supplier_name)
FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

DELETE FROM branch
WHERE branch_id = 2;

SELECT * from branch_supplier;

CREATE TABLE trigger_test (
message VARCHAR(100)
);

DELIMITER $$
CREATE
TRIGGER my_trigger BEFORE INSERT
ON employee
FOR EACH ROW BEGIN
INSERT INTO trigger_test VALUES('added new employee');
END$$
DELIMITER ;

INSERT INTO employee
VALUES(109, 'OSCAR', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;

DELIMITER $$
CREATE
TRIGGER my_trigger1 BEFORE INSERT
ON employee
FOR EACH ROW BEGIN
INSERT INTO trigger_test VALUES(NEW.first_name);
END$$
DELIMITER ;

INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;

DELIMITER $$
CREATE
TRIGGER my_trigger2 BEFORE INSERT
ON employee
FOR EACH ROW BEGIN
IF NEW.sex = 'M' THEN
INSERT INTO trigger_test VALUES('added male employee');
ELSEIF NEW.sex = 'F' THEN
INSERT INTO trigger_test VALUES('added female');
ELSE
INSERT INTO trigger_test VALUES('added other employee');
END IF;
END$$
DELIMITER ;

INSERT INTO employee
VALUES(111, 'Pam', 'Beesly', '1988-02-19', 'F', 69000, 106, 3);

SELECT * FROM trigger_test;
