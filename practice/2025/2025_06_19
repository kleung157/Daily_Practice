Date: 06/19/2025

############################

Website:
StrataScratch - ID 2006

Difficulty:
Easy

Question Type:
Python - Pandas

Question:
Meta - Users Activity Per Month Day
Return the total number of posts made on each calendar day of the month, aggregated across all months and years (ignoring user and year).

Data Dictionary:
Table name = 'facebook_posts'
post_id: int64(int)
poster: int64(int)
post_text: object(str)
post_keywords: object(str)
post_date: datetime64(dt)

Code:
Solution #1 (using copy(), groupby(), size(), reset_index(), dt.day)
# Question: Return total number of posts made on each calendar day of the month,
# aggregated across all months and years (ignoring user and year)
# Output: total_post

# Import libraries
import pandas as pd

# Preview data
data = facebook_posts.copy()
df = pd.DataFrame(data)
#df.head(10)

# Extract day of month
df['day_of_month'] = df['post_date'].dt.day

# Group by day of month and count posts
post_per_day_df = df.groupby('day_of_month').size().reset_index(name='total_posts')

# Final iteration
post_per_day_df

# Check solution
#print(df[['day_of_month', 'post_id']].sort_values(by='day_of_month', ascending=True))

############################

Website:
StrataScratch - ID 2009

Difficulty:
Easy

Question Type:
Python - Pandas

Question:
Twitch - Users With Two Statuses
Find users who are both a viewer and streamer.

Data Dictionary:
Table name = 'twitch_sessions'
user_id: int64(int)
session_start: datetime64(dt)
session_end: datetime64(dt)
session_id: int64(int)
session_type: object(str)

Code:
Solution #1 (using unique(), pd.Series, list(), set(), sort_values(), to_frame() )
# Question: Find users who are both a viewer and streamer
# Output: users

# Import libraries
import pandas as pd

# Preview data
data = twitch_sessions.copy()
df = pd.DataFrame(data)
#df.head(10)

# User IDS for 'streamer' and 'viewer'
streamer_users = df[df['session_type'] == 'streamer']['user_id'].unique()
viewer_users = df[df['session_type'] == 'viewer']['user_id'].unique()

# Intersection of two sets of user ids
user_ids_df = pd.Series(list(set(streamer_users) & set(viewer_users))).to_frame(name='user_id')

# Final iteration
print("User IDS who are both a viewer and streamer.")
user_ids_df

# Check solution
# print(df[['user_id', 'session_type']].sort_values(by='user_id', ascending=True))

############################

Website:
StrataScratch - ID 9774

Difficulty:
Easy

Question Type:
SQL

Question:
Meta - Find the maximum step reached for every feature
Find the maximum step reached for every feature.
Output the feature id along with its maximum step.

Data Dictionary:
Table name = 'facebook_product_features_realizations'
feature_id: bigint(int)
step_reached: bigint(int)
timestamp: timestamp(dt)
user_id: bigint(int)

Code:
/* Question: Find the maximum step reached for every feature */
/* Output: feature_id, maximum_step */

/* SELECT to preview data */
SELECT * FROM facebook_product_features_realizations LIMIT 10;

/* Iteration */
SELECT
    feature_id,
    MAX(step_reached) as step_reached_max
FROM facebook_product_features_realizations
GROUP BY feature_id
ORDER by feature_id ASC;

/* Final iteration */
SELECT
    feature_id,
    MAX(step_reached) as maximum_step
FROM facebook_product_features_realizations
GROUP BY feature_id
ORDER by feature_id ASC;

############################

Website:
StrataScratch - ID 9780

Difficulty:
Easy

Question Type:
SQL

Question:
Meta - Find the overall friend acceptance count for a given date
Find the overall friend acceptance count for a given date.
Assume the date is 2nd of January 2019.

Data Dictionary:
Table name = 'facebook_friendship_requests'
date_approved: date(dt)
date_sent: date(dt)
receiver: bigint(int)
sender: bigint(int)

Code:
/* Question: Find the overall friend acceptance count for a given date.
Assume the date is 2nd of January 2019. */
/* Output: friend_acceptance_count */

/* SELECT to preview data */
SELECT * FROM facebook_friendship_requests LIMIT 10;

/* Iteration */
SELECT
    COUNT(date_approved) AS date_approved_count
FROM facebook_friendship_requests
WHERE date_approved = '2019-01-02';

/* Final iteration */
SELECT
    COUNT(date_approved) AS friend_acceptance_count
FROM facebook_friendship_requests
WHERE date_approved = '2019-01-02';

############################

Website:
StrataScratch - ID 9787

Difficulty:
Easy

Question Type:
SQL

Question:
Meta - User Scroll Up Events
Find all users that have performed at least one scroll_up event.

Data Dictionary:
Table name = 'facebook_web_log'
action: text(str)
timestamp: timestamp(dt)
user_id: bigint(int)

Code:
/* Question: Find all users that have performed at least one scroll_up event. */
/* Output: user_id */

/* SELECT to preview data */
SELECT * FROM facebook_web_log LIMIT 10;

/* Iteration */
SELECT 
   user_id,
   action
FROM facebook_web_log
WHERE action = 'scroll_up'
ORDER BY user_id ASC;

/* Final iteration */
SELECT 
   DISTINCT user_id
FROM facebook_web_log
WHERE action = 'scroll_up'
ORDER BY user_id ASC;

############################

Website:
StrataScratch - ID 9788

Difficulty:
Easy

Question Type:
SQL

Question:
Meta - Find the total number of interactions on days 0 and 2
Find the total number of interactions on days 0 and 2.
Output the result alongside the day.

Data Dictionary:
Table name = 'facebook_user_interactions'
day: bigint(int)
user1: bigint(int)
user2: bigint(int)

Code:
/* Question: Find the total number of interactions on days 0 and 2 */
/* Output: result, day */

/* SELECT to preview data */
SELECT * FROM facebook_user_interactions LIMIT 10;

/* Iteration */
SELECT
    day,
    COUNT(*) AS interaction_count
FROM facebook_user_interactions
GROUP BY day
ORDER BY day ASC;

/* Final iteration */
SELECT
    day,
    COUNT(*) AS interaction_total
FROM facebook_user_interactions
WHERE day IN (0, 2)
GROUP BY day
ORDER BY day ASC;

############################

Website:
StrataScratch - ID 9798

Difficulty:
Easy

Question Type:
SQL

Question:
Forbes - Find the average profit for major banks
Find the average profit for the industry "Major Banks".

Data Dictionary:
Table name = 'forbes_global_2010_2014'
assets: double precision(flt)
company: text(str)
continent: text(str)
country: text(str)

Code:
/* Question: Find the average profit for the industry "Major Banks". */
/* Output: profits */

/* SELECT to preview data */
SELECT * FROM forbes_global_2010_2014 LIMIT 10;

/* Iteration */
SELECT
    industry,
    profits
FROM forbes_global_2010_2014
WHERE industry = 'Major Banks';

/* Final iteration */
SELECT
    CAST(AVG(profits) AS DECIMAL (10, 2)) AS profit_avg
FROM forbes_global_2010_2014
WHERE industry = 'Major Banks';

############################

IBM: Skills Network Lab Exercises: Joins

/* Preview data */
SELECT * FROM DEPARTMENTS LIMIT 5;
SELECT * FROM EMPLOYEES LIMIT 5;
SELECT * FROM JOB_HISTORY LIMIT 5;
SElECT * FROM JOBS LIMIT 5;

/* Select the names and job start dates of all employees who work for the department number 5. */
SELECT
    e.f_name,
    e.l_name,
    jh.START_DATE
FROM EMPLOYEES AS e
JOIN JOB_HISTORY AS jh
    ON e.EMP_ID = jh.EMPL_ID
WHERE e.DEP_ID = '5'
ORDER BY jh.START_DATE ASC;

/* Select the names, job start dates, and job titles of all employees who work for the department number 5 */
SELECT
    e.f_name,
    e.l_name,
    j.job_title,
    jh.start_date 
FROM EMPLOYEES AS e
JOIN JOB_HISTORY AS jh
    ON e.EMP_ID = jh.EMPL_ID
JOIN JOBS AS j
    ON e.JOB_ID = j.JOB_IDENT
WHERE e.DEP_ID = '5'
ORDER BY jh.start_date ASC;

/* Perform a Left Outer Join on EMPLOYEES and DEPARTMENT tables and select 
employee id, last name, department id, and department name for all employees */
SELECT
    e.EMP_ID,
    e.L_NAME,
    e.DEP_ID,
    d.DEP_NAME
FROM EMPLOYEES AS e
LEFT JOIN DEPARTMENTS AS d 
    ON e.DEP_ID = d.DEPT_ID_DEP
ORDER BY 
    d.DEP_NAME ASC,
    e.L_NAME ASC;
    
/* Re-write the previous query but have the result set include all the employees 
but department names for only the employees who were born before 1980 */
SELECT
    e.EMP_ID,
    e.L_NAME,
    e.DEP_ID,
    d.DEP_NAME
FROM EMPLOYEES AS e
LEFT JOIN DEPARTMENTS AS d 
    ON e.DEP_ID = d.DEPT_ID_DEP
WHERE YEAR(e.B_DATE) < 1980
ORDER BY 
    d.DEP_NAME ASC,
    e.L_NAME ASC;
    
/* Perform a full join on the EMPLOYEES and DEPARTMENT tables and select
the first name, last name, and department name of all employees */
SELECT
    e.F_NAME,
    e.L_NAME,
    d.DEP_NAME
FROM EMPLOYEES AS e
LEFT JOIN DEPARTMENTS AS d 
    ON e.DEP_ID = d.DEPT_ID_DEP
    
UNION

SELECT
    e.F_NAME,
    e.L_NAME,
    d.DEP_NAME
FROM EMPLOYEES AS e
RIGHT JOIN DEPARTMENTS AS d 
    ON e.DEP_ID = d.DEPT_ID_DEP;
    
/* Re-write the previous query but have the result set include all
employee names but department id and department names only for male employees */
SELECT
    e.F_NAME,
    e.L_NAME,
    d.DEPT_ID_DEP,
    d.DEP_NAME
FROM EMPLOYEES AS e
LEFT JOIN DEPARTMENTS AS d 
    ON e.DEP_ID = d.DEPT_ID_DEP
    AND e.SEX = 'M'
    
UNION

SELECT
    e.F_NAME,
    e.L_NAME,
    d.DEPT_ID_DEP,
    d.DEP_NAME
FROM EMPLOYEES AS e
RIGHT JOIN DEPARTMENTS AS d 
    ON e.DEP_ID = d.DEPT_ID_DEP
    AND e.SEX = 'M'
ORDER BY DEP_NAME ASC;

############################

IBM: Skills Network Lab Exercises: Joins Part 2

/* Preview data. */
SELECT * FROM chicago_crime LIMIT 5;
SELECT * FROM chicago_public_schools LIMIT 5;
SELECT * FROM chicago_socioeconomic_data LIMIT 5;

/* List the case number, type of crime and community area for all
crimes in community area number 18. */
SELECT 
    cc.CASE_NUMBER,
    cc.PRIMARY_TYPE,
    csd.COMMUNITY_AREA_NAME
FROM chicago_crime AS cc
JOIN chicago_socioeconomic_data AS csd
    ON cc.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER
WHERE cc.COMMUNITY_AREA_NUMBER = '18';

/* List all crimes that took place at a school. Include case number,
crime type and community name. */
SELECT 
    DISTINCT cc.CASE_NUMBER,
    cc.PRIMARY_TYPE,
    csd.COMMUNITY_AREA_NAME
FROM chicago_crime AS cc
JOIN chicago_socioeconomic_data AS csd
    ON cc.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER
WHERE cc.LOCATION_DESCRIPTION LIKE '%SCHOOL%';

/* For the communities of Oakland, Armour Square, Edgewater and
CHICAGO list the associated community_area_numbers and the case_numbers. */
SELECT 
    cc.CASE_NUMBER,
    csd.COMMUNITY_AREA_NUMBER
FROM chicago_crime AS cc
LEFT JOIN chicago_socioeconomic_data AS csd
    ON cc.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER
WHERE csd.COMMUNITY_AREA_NAME IN ('Oakland', 'Armour Square', 'Edgewater', 'CHICAGO')

UNION

SELECT 
    cc.CASE_NUMBER,
    csd.COMMUNITY_AREA_NUMBER
FROM chicago_crime AS cc
RIGHT JOIN chicago_socioeconomic_data AS csd
    ON cc.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER
WHERE csd.COMMUNITY_AREA_NAME IN ('Oakland', 'Armour Square', 'Edgewater', 'CHICAGO')
ORDER BY COMMUNITY_AREA_NUMBER DESC;

############################

IBM: Skills Network Lab Exercises: Joins, Views, Stored Procedures, Transactions
/* Preview data. */
SELECT * FROM chicago_crime LIMIT 5;
SELECT * FROM chicago_public_schools LIMIT 5;
SELECT * FROM chicago_socioeconomic_data LIMIT 5;

/* Write and execute a SQL query to list the school names, community names
and average attendance for communities with a hardship index of 98. */
SELECT
    cps.AVERAGE_STUDENT_ATTENDANCE,
    cps.COMMUNITY_AREA_NAME,
    cps.NAME_OF_SCHOOL
FROM chicago_public_schools AS cps
JOIN chicago_socioeconomic_data AS csd
    ON cps.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER
WHERE csd.HARDSHIP_INDEX = '98';

/* Write and execute a SQL query to list all crimes that took place at a school.
Include case number, crime type and community name. */
SELECT
    cc.CASE_NUMBER,
    cc.PRIMARY_TYPE,
    cps.COMMUNITY_AREA_NAME
FROM chicago_crime AS cc
JOIN chicago_public_schools AS cps
    ON cc.COMMUNITY_AREA_NUMBER = cps.COMMUNITY_AREA_NUMBER
WHERE cc.LOCATION_DESCRIPTION LIKE '%SCHOOL%';

/* Write and execute a SQL statement to create a view showing the columns listed
in the following table, with new column names as shown in the second column */
CREATE VIEW cps_view (
    School_Name, 
    Safety_Rating, 
    Family_Rating, 
    Environment_Rating, 
    Instruction_Rating, 
    Leaders_Rating, 
    Teachers_Rating
) AS
    SELECT 
        NAME_OF_SCHOOL,
        Safety_Icon,
        Family_Involvement_Icon,
        Environment_Icon,
        Instruction_Icon,
        Leaders_Icon,
        Teachers_Icon
    FROM chicago_public_schools;
SELECT * FROM cps_view;


/* Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer. */
/* Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter. */
/* Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information. */
/* Write a query to call the stored procedure, passing a valid school ID and a leader score of 50, to check that the procedure works as expected. */
Score lower limit	Score upper limit	Icon
80	99	Very strong
60	79	Strong
40	59	Average
20	39	Weak
0	19	Very weak

Code: 
DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE (
    IN School_ID INT,
    IN Leaders_Score INT
)
BEGIN
    IF Leaders_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = School_ID;
    END IF;

END //

DELIMITER ;

CALL UPDATE_LEADERS_SCORE(610038, 50);

SELECT * 
FROM chicago_public_schools
WHERE School_ID = 610038;

/* Update your stored procedure definition. Add a generic ELSE clause to the IF statement that rolls back the current work if the score did not fit any of the preceding categories. */
/* Update your stored procedure definition again. Add a statement to commit the current unit of work at the end of the procedure. */
/* Write and run one query to check that the updated stored procedure works as expected when you use a valid score of 38.
Write and run another query to check that the updated stored procedure works as expected when you use an invalid score of 101. */
Code:

DELIMITER //
CREATE PROCEDURE UPDATE_LEADERS_SCORE (
    IN School_ID INT,
    IN Leaders_Score INT
)
BEGIN
    IF Leaders_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = School_ID;
    ELSEIF Leaders_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = School_ID;
    ELSE
        ROLLBACK;
    END IF;
END //
DELIMITER ;

CALL UPDATE_LEADERS_SCORE(610038, 38);

SELECT School_ID, Leaders_Score, Leaders_Icon
FROM chicago_public_schools
WHERE School_ID = 610038;

CALL UPDATE_LEADERS_SCORE(610038, 101);

SELECT School_ID, Leaders_Score, Leaders_Icon
FROM chicago_public_schools
WHERE School_ID = 610038;
