Date: 05/30/2025

############################

Website:
DataLemur

Difficulty:
Easy

Question Type:
Python

Question:
Roman to Integer - Palantir Python Interview Question
Given a valid Roman numeral, convert it to an integer.

in case you don't think about the Roman empire that often, and need a crash-course on how to go from Superbowl "XLIV" to an actual number, here's the table mapping the numerals to their values:
The numerals are generally written from largest to smallest from left to right. For example, the number 11 is written as XI, where X represents 10 and I represents 1, so the total is 11.
Similarly, XXX would be 30 (unless we're talking about your browser's search history).

Example 1:
Input: s = "XI"
Output: 11
Explanation: X = 10, I = 1, XI = 11

In certain cases, a smaller numeral comes before a larger one to indicate subtraction. For example, 4 is written as IV, where I comes before V, meaning 1 is subtracted from 5, resulting in 4. Similarly, 90 is written as XC, where X comes before C, meaning 10 is subtracted from 100, giving 90.
This subtraction rule applies in the following cases:
I comes before V (5) or X (10) to make 4 and 9.
X comes before L (50) or C (100) to make 40 and 90.
C comes before D (500) or M (1000) to make 400 and 900.

Example 2:
Input: s = "LXIX"
Output: 69
Explanation: L = 50, X = 10, IX = 9, LXIX = 69. Nice.

Data Dictionary:
Table name = ''
N/A

Code:
Solution #1
def romanToInt(s):
    rom = {"I":1, "V":5, "X":10, "L":50, "C":100, "D":500, "M":1000}
    ans = 0
    i = 0
    
    while i < len(s):
        if i + 1 < len(s) and rom[s[i+1]] > rom[s[i]]:
            ans += rom[s[i+1]] - rom[s[i]]
            i += 2
        else:
            ans += rom[s[i]]
            i += 1
    
    return ans

############################

Website:
DataLemur

Difficulty:
Eaay

Question Type:
Python

Question:
Counting Letters In Numbers - Tesla Python Interview Question
If the numbers from 1 to N are written out in words (e.g., "one", "two", "three", "four", etc.), how many letters are used in total when writing all numbers between 1 and N (inclusive)?
While writing the words, follow these rules:
Do not count spaces or hyphens.
British usage applies (we're fancy like that): for numbers over 100, include "and" (e.g., "one hundred and fifteen").
You can assume that N will always be less than or equal to 1000. Given an integer N, return the total number of letters used when writing the numbers from 1 to N in words.

Example 1:
Input: N = 5
Output: 19
Explanation:
The numbers between 1 and 5 written in words are:
1 → "one" (3 letters)
2 → "two" (3 letters)
3 → "three" (5 letters)
4 → "four" (4 letters)
5 → "five" (4 letters)
In total, 3 + 3 + 5 + 4 + 4 = 19 letters.

Data Dictionary:
Table name = ''
N/A

Code:
Solution #1
def total_letters(N):
    base = {
        1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',
        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', 
        11: 'eleven', 12: 'twelve', 13: 'thirteen', 
        14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 
        17: 'seventeen', 18: 'eighteen', 19: 'nineteen', 
        20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty', 
        60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninety'
    }

    def get_word(num):
        word = ""
        if num >= 1000:
            word += base[num // 1000] + "thousand"
            num %= 1000

        if num >= 100:
            word += base[num // 100] + "hundred"
            num %= 100

        if num > 0 and word != "":
            word += "and"

        if num >= 20:
            word += base[num // 10 * 10]
            num %= 10

        if num > 0:
            word += base[num]

        return word

    ans = 0
    for num in range(1, N + 1):
        word = get_word(num)
        ans += len(word)

    return ans
    
Solution #2
def total_letters(N):
    base_word_count = {
        1: 3, 2: 3, 3: 5, 4: 4, 5: 4, 6: 3, 
        7: 5, 8: 5, 9: 4, 10: 3, 11: 6, 
        12: 6, 13: 8, 14: 8, 15: 7, 16: 7, 
        17: 9, 18: 8, 19: 8, 20: 6, 30: 6, 
        40: 5, 50: 5, 60: 5, 70: 7, 80: 6, 
        90: 6
    }
    
    def get_count(num):
        count = 0
        if num >= 1000:
        	# "thousand" has 8 letters
            count += (base_word_count[num // 1000] + 8)  
            num %= 1000

        if num >= 100:
        	# "hundred" has 7 letters
            count += base_word_count[num // 100] + 7  
            num %= 100

        if num > 0 and count > 0:
            count += 3  # "and" has 3 letters

        if num >= 20:
            count += base_word_count[num // 10 * 10]
            num %= 10

        if num > 0:
            count += base_word_count[num]
            
        return count
    
    ans = 0
    for num in range(1, N + 1):
        ans += get_count(num)
    
    return ans            

############################

Website:
StrataScratch - ID 2151

Difficulty:
Easy

Question Type:
SQL

Question:
Deloitte - Number of Hires During Specific Time Period
You have been asked to find the number of employees hired between the months of January and July in the year 2022 inclusive.
Your output should contain the number of employees hired in this given time frame.

Data Dictionary:
Table name = 'employees'
department: text(str)
first_name: text(str)
id: bigint(int)
joining_date: date(str)
last_name: text(str)
salary: bigint(int)

Code:
Solution #1
/* SELECT to preview data */
SELECT * FROM employees;

/* number of employees hired between Jan and July 2022 inclusive */
/* COUNT employees */
SELECT
    COUNT(*) AS num_employees_hired
FROM employees
WHERE joining_date BETWEEN '2022-01-01' AND '2022-07-31';

############################

Website:
StrataScratch - ID 2156

Difficulty:
Easy

Question Type:
SQL

Question:
Meta - Unique Employee Logins
You have been tasked with finding the worker IDs of individuals who logged in between the 13th to the 19th inclusive of December 2021.
In your output, provide the unique worker IDs for the dates requested.

Data Dictionary:
Table name = 'worker_logins'
city: text(str)
country: text(str)
device_type: text(str)
id: bigint(int)
ip_address: text(str)
login_timestamp: timestamp(str)
region: text(str)
worker_id: int(int)

Code:
Solution #1
/* SELECT to preview data */
SELECT * FROM worker_logins;

/* worker ids logged in between 13 to 19 of Dec 2021 inclusive */
/* unique worker id */
SELECT
    DISTINCT worker_id AS unique_worker_logins
FROM worker_logins
WHERE login_timestamp BETWEEN '2021-12-13' AND '2021-12-19';

############################

Website:
StrataScratch - ID 2159

Difficulty:
Easy

Question Type:
SQL

Question:
Amazon - April & May Sign Up's
You have been asked to get a list of all the sign up IDs with transaction start dates in either April or May.
Since a sign up ID can be used for multiple transactions only output the unique ID.
Your output should contain a list of non duplicated sign-up IDs.

Data Dictionary:
Table name = 'transactions'
amt: double precision(flt)
signup_id: bigint(int)
transaction_id: bigint(int)
transaction_start_date: date(str)

Code:
Solution #1
/* SELECT to preview data */
SELECT * FROM transactions;

/* list of signup ids with transaction start date in April or May */
/* unique sign up ID for multiple transactions */
/* DISTINCT signup_id */
SELECT
    DISTINCT signup_id
FROM transactions
WHERE EXTRACT(MONTH FROM transaction_start_date) = '4'
    OR EXTRACT(MONTH FROM transaction_start_date) = '5'
ORDER BY 1 ASC;

Solution #2 (EXTRACT with IN)
SELECT 
    DISTINCT signup_id
FROM transactions
WHERE EXTRACT(MONTH FROM transaction_start_date) IN (4, 5)
ORDER BY 1 ASC;

############################

Website:
StrataScratch - ID 2160

Difficulty:
Easy

Question Type:
SQL

Question:
Capital One - Oregon's Prior Month's Sales
The sales division is investigating their sales for the past month in Oregon.
Calculate the total revenue generated from Oregon-based customers for April 20

Data Dictionary:
Table name = 'online_orders'
cost_in_dollars: bigint(int)
customer_id: bigint(int)
date_sold: date(str)
product_id: bigint(int)
promotion_id: bigint(int)
units_sold: bigint(int)
Table name = 'online_customers'
address: text(str)
age: bigint(int)
email: text(str)
first_name: text(str)
id: bigint(int)
last_name: text(str)
state: text(str)

Code:
Solution #1
/* SELECT to preview data */
SELECT * FROM online_orders;
SELECT * FROM online_customers;

/* JOIN tables */
SELECT *
FROM online_orders as oo
JOIN online_customers as oc
    ON oo.customer_id = oc.id;

/* Sales for past month in Oregon */
/* Total revenue from Oregon customers April 2022 */
/* SUM total_revenue */
SELECT 
    SUM(cost_in_dollars * units_sold) AS total_revenue_oregon
FROM online_orders as oo
JOIN online_customers as oc
    ON oo.customer_id = oc.id
WHERE state = 'Oregon'
    AND EXTRACT(YEAR FROM date_sold) = 2022
    AND EXTRACT(MONTH FROM date_sold) = 4;

############################
