Date: 06/10/2025

############################

Website:
DataLemur

Difficulty:
Medium

Question Type:
Probability

Question:
Lazy Movie Raters - Netflix Probability Interview Question
Suppose 80% of Netflix users rate movies thumbs up 60% of the time, and thumbs down 40% of the time. However, 20% of Netflix users are "lazy": they rate 100% of the movies they watch as good!
Given that someone gives 3 movies IN A ROW a thumbs up, what's the probability they are a "lazy" rater?

Data Dictionary:
Table name = ''
N/A

Code:
80% of users rate 
thumbs up - 60%
thumbs down - 40%
20% of users lazy
thumbs up - 100%
User gives 3 movies in a row thumbs up, what's the probability they are a "lazy" rater

0.80 * 0.60 + 0.20 * 1 = 68% total probability of thumbs up
0.80 * 0.40 + 0.20 * 0 = 32% total probability of thumbs down

3 movies in a row thumbs up, probability they are lazy:
0.20 * 1 / (0.80 * 0.60^3 + 0.20 * 1) = 0.536 = 53.6% probability lazy
0.80 * 0.60^3 / (0.80 * 0.60^3 + 0.20 * 1) = 46.4% probabiliy not lazy

3 movies in a row thumbs down, probability they are not lazy:
0.80 * 0.40^3 / (0.80 * 0.40^3 + 0.20 * 0) = 100% probability not lazy
0.20 * 0^3 / (0.80 * 0.40^3 + 0.20 * 0) = 0% probability lazy

############################

Website:
DataLemur

Difficulty:
Medium

Question Type:
SQL

Question:
Sending vs. Opening Snaps - Snapchat SQL Interview Question
Assume you're given tables with information on Snapchat users, including their ages and time spent sending and opening snaps.
Write a query to obtain a breakdown of the time spent sending vs. opening snaps as a percentage of total time spent on these activities grouped by age group. Round the percentage to 2 decimal places in the output.
Notes:
Calculate the following percentages:
time spent sending / (Time spent sending + Time spent opening)
Time spent opening / (Time spent sending + Time spent opening)
To avoid integer division in percentages, multiply by 100.0 and not 100.
Explanation
Using the age bucket 26-30 as example, the time spent sending snaps was 5.67 and the time spent opening snaps was 3.
To calculate the percentage of time spent sending snaps, we divide the time spent sending snaps by the total time spent on sending and opening snaps, which is 5.67 + 3 = 8.67.
So, the percentage of time spent sending snaps is 5.67 / (5.67 + 3) = 65.4%, and the percentage of time spent opening snaps is 3 / (5.67 + 3) = 34.6%.

Data Dictionary:
Table name = 'activities'
activity_id: integer(int)
user_id: integer(int)
activity_type: string('send', 'open', 'chat')(str)
time_spent: float(flt)
activity_date: datetime(str)
Table name = 'age_breakdown'
user_id: integer(int)
age_bucket: string('21-25', '26-30', '31-35')(str)

Code:
Solution #1
/* SELECT to preview data */
SELECT * FROM activities;
SELECT * FROM age_breakdown;

/* JOIN tables */
SELECT 
    a.activity_date,
    a.activity_id,
    a.activity_type,
    a.time_spent,
    a.user_id,
    ab.age_bucket,
    ab.user_id
FROM activities AS a
JOIN age_breakdown AS ab
    ON a.user_id = ab.user_id;

/* Time spent sending vs. opening snaps as percentage of total time spent on 
these actvities grouped by age group */
/* Round percentage to 2 decimal places */
/* Time spent sending / (Time spent sending + Time spent opening) */
/* Time spent opening / (Time spent sending + Time spent opening) */ 
/* Avoid integer division in percentages, multiply by 100.0 */
WITH sending_time AS(
    SELECT 
        SUM(time_spent) AS send_sum
    FROM activities as a
    JOIN age_breakdown AS ab
        ON a.user_id = ab.user_id
    WHERE activity_type = 'send'
),
opening_time AS(
    SELECT
        SUM(time_spent) AS open_sum
    FROM activities as a
    JOIN age_breakdown AS ab
        ON a.user_id = ab.user_id
    WHERE activity_type = 'open'
)
SELECT
    CAST(
        (send_sum * 100.0) / (send_sum + open_sum) AS DECIMAL(10,2)) AS send_perc,
    CAST(
        (open_sum * 100.0) / (send_sum + open_sum) AS DECIMAL(10,2)) AS open_perc
FROM sending_time, opening_time;

/* Final iteration */
WITH sending_time AS(
    SELECT 
        SUM(time_spent) AS send_sum,
        age_bucket
    FROM activities as a
    JOIN age_breakdown AS ab
        ON a.user_id = ab.user_id
    WHERE activity_type = 'send'
    GROUP BY age_bucket
),
opening_time AS(
    SELECT
        SUM(time_spent) AS open_sum,
        age_bucket
    FROM activities as a
    JOIN age_breakdown AS ab
        ON a.user_id = ab.user_id
    WHERE activity_type = 'open'
    GROUP BY age_bucket
)
SELECT
    st.age_bucket,
    CAST(
        (st.send_sum * 100.0) / (st.send_sum + ot.open_sum) AS DECIMAL(10,2)) AS send_perc,
    CAST(
        (ot.open_sum * 100.0) / (st.send_sum + ot.open_sum) AS DECIMAL(10,2)) AS open_perc
FROM sending_time as st 
JOIN opening_time as ot
    ON st.age_bucket = ot.age_bucket;

Solution #2 (ROUND and FILTER most optimal)
SELECT 
    ab.age_bucket,
    ROUND(100.0 *
        SUM(a.time_spent) FILTER (WHERE a.activity_type = 'send') / 
        SUM(a.time_spent),2) AS send_perc,
    ROUND(100.0 *
        SUM(a.time_spent) FILTER (WHERE a.activity_type = 'open') / 
        SUM(a.time_spent),2) AS open_perc
FROM activities AS a
JOIN age_breakdown AS ab
    ON a.user_id = ab.user_id
WHERE activity_type IN ('open', 'send')
GROUP BY ab.age_bucket;

Solution #3 (ROUND, CASE WHEN, CTE)
WITH snaps_statistics AS (
  SELECT 
    age.age_bucket, 
    SUM(CASE WHEN activities.activity_type = 'send' 
      THEN activities.time_spent ELSE 0 END) AS send_timespent, 
    SUM(CASE WHEN activities.activity_type = 'open' 
      THEN activities.time_spent ELSE 0 END) AS open_timespent, 
    SUM(activities.time_spent) AS total_timespent 
  FROM activities
  INNER JOIN age_breakdown AS age 
    ON activities.user_id = age.user_id 
  WHERE activities.activity_type IN ('send', 'open') 
  GROUP BY age.age_bucket
) 

SELECT 
  age_bucket, 
  ROUND(100.0 * send_timespent / total_timespent, 2) AS send_perc, 
  ROUND(100.0 * open_timespent / total_timespent, 2) AS open_perc 
FROM snaps_statistics;

############################

Website:
StrataScratch - ID 9669

Difficulty:
Easy

Question Type:
SQL

Question:
Google - Count the number of speakers per each language
Count the number of speakers for each language.
Sort the result based on the number of speakers in descending order.

Data Dictionary:
Table name = 'playbook_users'
activated_at: date(str)
company_id: bigint(int)
created_at: timestamp(str)
language: text(str)
state: text(str)
user_id: bigint(int)

Code:
/* SELECT to preview data */
SELECT * FROM playbook_users;

/* Count number of speakers for each language */
/* Sort result by number of speakers DESC */
SELECT
    language,
    COUNT(DISTINCT user_id) as speaker_count
FROM playbook_users
GROUP BY language
ORDER BY speaker_count DESC;

/* Final iteration */
SELECT
    language,
    COUNT(user_id) as speaker_count
FROM playbook_users
GROUP BY language
ORDER BY speaker_count DESC;

############################

Website:
StrataScratch - ID 9672

Difficulty:
Easy

Question Type:
SQL

Question:
Southwest Airlines - Count the unique origin airports
Find how many different origin airports exist?

Data Dictionary:
Table name = 'us_flights'
actual_elapsed_time: double precision(flt)
arr_delay: bigint(int)
cancelled: bigint(int)
carier_delay: double precision(flt)
dest: text(str)
distance: bigint(int)
flight_date: date(str)
flight_num: bigint(int)
late_aircraft_delay: double precision(flt)
nas_delay: double precision(flt)
origin: text(str)
security_delay: double precision(flt)
unique_carrier: text(str)
weather_delay: double precision(flt)

Code:
/* SELECT to preview data */
SELECT * FROM us_flights;

/* How many different origin airports exist*/
SELECT 
    origin
FROM us_flights;

/* Final iteration */
SELECT 
    COUNT(DISTINCT origin) AS origin_airport_count
FROM us_flights;

############################

Website:
StrataScratch - ID 9673

Difficulty:
Easy

Question Type:
SQL

Question:
American Airlines - Find unique IATA codes
What are the unique airport codes for all origin airports in the dataset? (e.g., LAX, JFK, SFO)

Data Dictionary:
Table name = 'us_flights'
actual_elapsed_time: double precision(flt)
arr_delay: bigint(int)
cancelled: bigint(int)
carier_delay: double precision(flt)
dest: text(str)
distance: bigint(int)
flight_date: date(str)
flight_num: bigint(int)
late_aircraft_delay: double precision(flt)
nas_delay: double precision(flt)
origin: text(str)
security_delay: double precision(flt)
unique_carrier: text(str)
weather_delay: double precision(flt)

Code:
/* SELECT to preview data */
SELECT * FROM us_flights;

/* Unique airport codes for all origin airports */
/* Output: origin */
SELECT
    DISTINCT origin
FROM us_flights;

/* Final iteration */
SELECT
    DISTINCT origin AS unique_airport_codes
FROM us_flights
ORDER BY unique_airport_codes ASC;

############################

Website:
StrataScratch - ID 9674

Difficulty:
Easy

Question Type:
SQL

Question:
American Airlines - Find the top 5 longest US flights by distance
Find the top 5 longest US flights by distance. 
Output the result along with the corresponding origin, destination, and distance. 
If multiple flights exist between the same origin and destination, include only one entry for that airport pair. 
Return the top 5 longest airport pairs by distance, but include all ties. 
Sort the flights from longest to shortest.

Data Dictionary:
Table name = 'us_flights'
actual_elapsed_time: double precision(flt)
arr_delay: bigint(int)
cancelled: bigint(int)
carier_delay: double precision(flt)
dest: text(str)
distance: bigint(int)
flight_date: date(str)
flight_num: bigint(int)
late_aircraft_delay: double precision(flt)
nas_delay: double precision(flt)
origin: text(str)
security_delay: double precision(flt)
unique_carrier: text(str)
weather_delay: double precision(flt)

Code:
Solution #1 (missing ties)
/* SELECT to preview data */
SELECT * FROM us_flights;

/* Top 5 longest US flights by distance */
/* If multiple flights exist between origin/destination include only one entry for the pair */
/* Return top 5 longest airport pairs by distance, include all ties */
/* Output: Result, origin, destination, distance, sort by flights from longest to shortest */
/* Final iteration */
SELECT
    origin,
    dest,
    distance
FROM us_flights
ORDER BY distance DESC
LIMIT 5;

Solution #2 (includes ties using DENSE_RANK)
WITH flight_pairs AS (
    SELECT
        origin,
        dest,
        MAX(distance) as distance_max
    FROM us_flights
    GROUP BY origin, dest
),
ranked_flights AS (
    SELECT
        origin,
        dest,
        distance_max,
        DENSE_RANK() OVER (ORDER BY distance_max DESC) AS flight_rank
    FROM flight_pairs
)
SELECT 
    origin,
    dest,
    distance_max AS distance
FROM ranked_flights
WHERE flight_rank <= 5
ORDER BY distance DESC;

############################
